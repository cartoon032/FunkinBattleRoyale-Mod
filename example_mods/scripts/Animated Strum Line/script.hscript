var strums = [];
var strumX = [];
var strumy = [];
var timer;
var coloredArrows:Bool = true;
function initScript(ps){
	coloredArrows = BRtools.getSetting("Color Arrows"); // Grabs a setting
}
function strumNoteAdd(ps,note,player){
	if(player) strums[note.id] = note;
	if(player) strumX[note.id] = note.x;
	if(player) strumy[note.id] = note.y + 10;

}

function noteMiss(ps,_,note){
	sickCombo = 0;

	var data = note;
	if(note.noteData != null) data = note.noteData;
	if(strums[data] == null) return;
	setColor(data,[1,0,0]);

	FlxTween.tween(strums[data],{y: strumy[data] + 10},0.05,{ease:FlxEase.cubeIn,onComplete: function(_){ // Shakes the note up and down
		FlxTween.tween(strums[data],{y: strumy[data] - 10},0.05,{ease:FlxEase.cubeIn,onComplete: function(_){
			FlxTween.tween(strums[data],{y: strumy[data]},0.05,{ease:FlxEase.cubeIn});
		}});

	}});
}
function setColor(data,c){
	if(!coloredArrows) return; // Don't do anything if Color Arrows is false
	strums[data].setColorTransform(c[0],c[1],c[2]); // Recolors the arrow
}
function miss(ps,_){

	for(direction in [0,1,2,3]){
		setColor(direction,[1,0,0]);

		var dir = if(direction > 1) 10 else -10; // Adjust shake depending on if the note is on the left or right
		FlxTween.tween(strums[direction],{x: strumX[direction] + dir},0.05,{ease:FlxEase.cubeIn,onComplete: function(_){ // Shakes the strumline left and right
			FlxTween.tween(strums[direction],{x: strumX[direction] - dir},0.05,{ease:FlxEase.cubeIn,onComplete: function(_){
				FlxTween.tween(strums[direction],{x: strumX[direction]},0.05,{ease:FlxEase.cubeIn});
			}});
		}});
		FlxTween.tween(strums[direction],{y: strumy[direction] + 10},0.05,{ease:FlxEase.cubeIn,onComplete: function(_){ // Shakes the strumline up and down
			FlxTween.tween(strums[direction],{y: strumy[direction] - 10},0.05,{ease:FlxEase.cubeIn,onComplete: function(_){
				FlxTween.tween(strums[direction],{y: strumy[direction]},0.05,{ease:FlxEase.cubeIn});
			}});
		}});
	}
}




function update(ps,el){
	if(coloredArrows){
		for(direction in [0,1,2,3]){ // Fades back to normal colors

			if(strums[direction].colorTransform.redMultiplier < 1) strums[direction].colorTransform.redMultiplier += 0.05;
			if(strums[direction].colorTransform.greenMultiplier < 1) strums[direction].colorTransform.greenMultiplier += 0.05;
			if(strums[direction].colorTransform.blueMultiplier < 1) strums[direction].colorTransform.blueMultiplier += 0.05;
		}
	}
}


function noteHit(ps,_,note){
	if (note == null || note.isSustainNote) return; // Don't do anything if note is null or if the note is a sus note
	var rgb = [0,0,0]; 
	switch(note.rating){ // Adjust notecolor based on rating
		case 'shit':
			rgb = [0.7,0,0];
		case 'bad':
			rgb = [0.5,0.3,0];
		case 'good':
			rgb = [0.3,0.5,0];
		case 'sick':
			rgb = [0,1,0];
	}

	setColor(note.noteData,rgb);

}

